import{M as s,_ as n,r as a,o as l,c as p,u as o,t as e,d as c,F as t,n as r,j as y,A as F,B as D,C as A,e as C,a as i}from"./app.31d6c984.js";const d=s(Array.from(Array(3).keys()).map((s=>Array.from(Array(3).keys()).map((s=>"")))));function u(s){if(!s.startsWith("="))return s;s=s.slice(1).replace(/\b([A-Z])(\d{1,2})\b/g,((s,n,a)=>`get(${n.charCodeAt(0)-65},${a})`));try{return new Function("get",`return ${s}`)(g)}catch(n){return`#ERROR ${n}`}}function g(s,n){const a=u(d[s][n]),l=Number(a);return Number.isFinite(l)?l:a}d[0][0]="1",d[0][1]="2",d[0][2]="= A0 + A1";const b=["title"],h=["value"],v={key:1},m=n({__name:"SpreadSheetCell",props:{c:Number,r:Number},setup(s){const n=s,c=a(!1);function t(s){c.value=!1,d[n.c][n.r]=s.target.value.trim()}return(n,a)=>(l(),p("div",{class:"cell",title:o(d)[s.c][s.r],onClick:a[1]||(a[1]=s=>c.value=!0)},[c.value?(l(),p("input",{key:0,value:o(d)[s.c][s.r],onChange:t,onBlur:t,onVnodeMounted:a[0]||(a[0]=({el:s})=>s.focus())},null,40,h)):(l(),p("span",v,e(o(u)(o(d)[s.c][s.r])),1))],8,b))}},[["__scopeId","data-v-3efd69a9"]]),f=(s=>(F("data-v-3be5c051"),s=s(),D(),s))((()=>c("th",null,null,-1))),I=n({__name:"SpreadSheet",setup(s){const n=d.map(((s,n)=>String.fromCharCode(65+n)));return(s,a)=>(l(),p("table",null,[c("thead",null,[c("tr",null,[f,(l(!0),p(t,null,r(o(n),(s=>(l(),p("th",null,e(s),1)))),256))])]),c("tbody",null,[(l(!0),p(t,null,r(o(d)[0].length,(s=>(l(),p("tr",null,[c("th",null,e(s-1),1),(l(!0),p(t,null,r(o(n),((n,a)=>(l(),p("td",null,[y(m,{r:s-1,c:a},null,8,["r","c"])])))),256))])))),256))])]))}},[["__scopeId","data-v-3be5c051"]]),Z=c("h1",{id:"reactivity-in-depth",tabindex:"-1"},[C("深入响应式系统 "),c("a",{class:"header-anchor",href:"#reactivity-in-depth","aria-hidden":"true"},"#")],-1),V=c("p",null,"Vue 最标志性的功能就是其低侵入性的响应式系统。组件状态都是由响应式的 JavaScript 对象组成的。当更改它们时，视图会随即自动更新。这让状态管理更加简单直观，但理解它是如何工作的也是很重要的，这可以帮助我们避免一些常见的陷阱。在本节中，我们将深入研究 Vue 响应性系统的一些底层细节。",-1),G=c("h2",{id:"what-is-reactivity",tabindex:"-1"},[C("什么是响应性 "),c("a",{class:"header-anchor",href:"#what-is-reactivity","aria-hidden":"true"},"#")],-1),x=c("p",null,"这个术语在今天的各种编程讨论中经常出现，但人们说它的时候究竟是想表达什么意思呢？本质上，响应性是一种可以使我们声明式地处理变化的编程范式。一个经常被拿来当作典型例子的用例即是 Excel 表格：",-1),E=i("",79),k=JSON.parse('{"title":"深入响应式系统","description":"","frontmatter":{"outline":"deep"},"headers":[{"level":2,"title":"什么是响应性","slug":"what-is-reactivity","link":"#what-is-reactivity","children":[]},{"level":2,"title":"Vue 中的响应性是如何工作的","slug":"how-reactivity-works-in-vue","link":"#how-reactivity-works-in-vue","children":[]},{"level":2,"title":"运行时 vs. 编译时响应性","slug":"runtime-vs-compile-time-reactivity","link":"#runtime-vs-compile-time-reactivity","children":[]},{"level":2,"title":"响应性调试","slug":"reactivity-debugging","link":"#reactivity-debugging","children":[{"level":3,"title":"组件调试钩子","slug":"component-debugging-hooks","link":"#component-debugging-hooks","children":[]},{"level":3,"title":"计算属性调试","slug":"computed-debugging","link":"#computed-debugging","children":[]},{"level":3,"title":"侦听器调试","slug":"watcher-debugging","link":"#watcher-debugging","children":[]}]},{"level":2,"title":"与外部状态系统集成","slug":"integration-with-external-state-systems","link":"#integration-with-external-state-systems","children":[{"level":3,"title":"不可变数据","slug":"immutable-data","link":"#immutable-data","children":[]},{"level":3,"title":"状态机","slug":"state-machines","link":"#state-machines","children":[]},{"level":3,"title":"RxJS","slug":"rxjs","link":"#rxjs","children":[]}]}],"relativePath":"guide/extras/reactivity-in-depth.md"}'),j=Object.assign({name:"guide/extras/reactivity-in-depth.md"},{setup:s=>(s,n)=>{const a=A("VueJobs");return l(),p("div",null,[Z,y(a),V,G,x,y(I),E])}});export{k as __pageData,j as default};
